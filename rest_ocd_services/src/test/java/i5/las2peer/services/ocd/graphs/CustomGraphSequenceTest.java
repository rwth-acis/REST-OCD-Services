package i5.las2peer.services.ocd.graphs;

import i5.las2peer.services.ocd.utils.Database;
import i5.las2peer.services.ocd.viewer.LayoutHandler;
import i5.las2peer.services.ocd.viewer.layouters.GraphLayoutType;
import i5.las2peer.services.ocd.viewer.painters.CoverPaintingType;
import org.junit.Ignore;
import org.junit.Test;

import java.util.HashMap;

public class CustomGraphSequenceTest {
    @Test
    @Ignore
    public void generateSequenceCommunitiesTest() throws Exception {
        Database db = new Database(false);
        CustomGraphSequence sequence = db.getGraphSequence("maxkissgen","734147");

//        CustomGraph firstSequenceGraph = db.getGraph("maxkissgen", sequence.getCustomGraphKeys().get(0));
//        OcdAlgorithm algo = new ClizzAlgorithm();
//        Cover someCover = algo.detectOverlappingCommunities(firstSequenceGraph);
//        someCover.setGraph(firstSequenceGraph);
//        String coverId = db.storeCover(someCover);
        System.out.println(sequence.getSequenceCommunityColorMap() + " " + sequence.getSequenceCommunityColorMap().isEmpty());
        System.out.println(sequence.getCommunitySequenceCommunityMap());
//        sequence.generateSequenceCommunities("maxkissgen", db,0.3);
//        System.out.println(sequence.getSequenceCommunityColorMap() + " " + sequence.getSequenceCommunityColorMap().isEmpty());
//        System.out.println(sequence.getCommunitySequenceCommunityMap());
          String sequenceId = "734147";
//        String sequenceId = db.storeGraphSequence(sequence);


        if(sequence.getSequenceCommunityColorMap().isEmpty()) { // Generate sequence Communities if not already done
            System.out.println("Generating sequence communities");
            sequence.generateSequenceCommunities(db, "maxkissgen", 0.3); //TODO: Test similarity threshold, make it settable
            db.storeGraphSequence(sequence);
        }

        System.out.println(sequence.getSequenceCommunityColorMap() + " " + sequence.getSequenceCommunityColorMap().isEmpty());
        System.out.println(sequence.getCommunitySequenceCommunityMap());

        boolean sequenceNotYetPainted = sequence.getSequenceCommunityColorMap().containsValue(null);
        Cover cover = db.getCover("maxkissgen","734136","799861");
        (new LayoutHandler()).doLayoutSequence(cover
                , sequence, GraphLayoutType.valueOf("ORGANIC"), false, false, 20, 45, CoverPaintingType.valueOf("PREDEFINED_COLORS"));
        if(sequenceNotYetPainted) {
            sequenceId = db.storeGraphSequence(sequence); // update sequence with colors generated by the layouter
        }

        db.updateCover(cover);
        sequence = db.getGraphSequence("maxkissgen", sequenceId);

        System.out.println(sequence.getSequenceCommunityColorMap() + " " + sequence.getSequenceCommunityColorMap().isEmpty());
        System.out.println(sequence.getCommunitySequenceCommunityMap());

        sequence.setCommunitySequenceCommunityMap(new HashMap<>());
        sequence.setSequenceCommunityColorMap(new HashMap<>());
        db.storeGraphSequence(sequence);

        //CoverPainter painter = new PredefinedColorsCoverPainter();
        //Cover cover = db.getCover("maxkissgen", "734136", "748246");
        //painter.doPaintSequence(cover, sequence);

        //db.deleteCover("maxkissgen", sequence.getCustomGraphKeys().get(0), coverId, new ThreadHandler());

//        Database db = new Database(true);
//        db.init();
//
//        CustomGraph graph1 = OcdTestGraphFactory.getDolphinsGraph();
//        graph1.setUserName("testuser");
//        String graph1Key = db.storeGraph(graph1);
//        graph1 = db.getGraph("testuser", graph1Key);
//
//
//        CustomGraph graph2 = OcdTestGraphFactory.getDolphinsGraph();
//        graph2.setUserName("testuser");
//        String graph2Key = db.storeGraph(graph2);
//        graph2 = db.getGraph("testuser", graph2Key);
//
//        OcdAlgorithm algo = new ClizzAlgorithm();
//        Cover cover1 = algo.detectOverlappingCommunities(graph1);
//        cover1.setGraph(graph1);
//        db.storeCover(cover1);
//        algo = new LinkCommunitiesAlgorithm();
//        Cover cover2 = algo.detectOverlappingCommunities(graph2);
//        cover2.setGraph(graph2);
//        db.storeCover(cover2);
//
//        GraphSequence sequence = new GraphSequence(graph1, false);
//        sequence.addGraphToSequence(1, graph2.getKey());
//        sequence.generateSequenceCommunities("testuser",db,0.3);
//
//        System.out.println(sequence.getSequenceCommunityColorMap());
//        System.out.println(sequence.getCommunitySequenceCommunityMap());
//
//        db.deleteDatabase();
    }
}
