/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains the gradle tasks for the rest ocd service
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse' // only required when using Eclipse
    id 'java-library'
}


def export = "$projectDir/export"
def ocd = "$rootDir/ocd"

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    api "i5:las2peer-bundle:${project.property('core.version')}"

    //ocd service deps
    implementation "org.apache.commons:commons-exec:1.3"
    compileOnly "com.google.guava:guava:31.0.1-jre"
    implementation "org.la4j:la4j:0.4.9"
    implementation "org.eclipse.persistence:eclipselink:2.7.9"
    compileOnly "org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1"
    compileOnly("commons-jxpath:commons-jxpath:1.3") {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xerces', module: 'xerces'
    }
    compileOnly "commons-logging:commons-logging:1.2"
    compileOnly "org.bouncycastle:bcprov-jdk15on:1.70"

    compileOnly "net.minidev:json-smart:2.4.7"
    compileOnly "com.googlecode.json-simple:json-simple:1.1.1"
    compileOnly "org.apache.commons:commons-pool2:2.11.1"
    implementation "org.apache.commons:commons-dbcp2:2.9.0"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly "org.apache.commons:commons-math3:3.6.1"
    compileOnly "org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1"
    implementation "org.apache.lucene:lucene-core:8.9.1"
    implementation "org.apache.lucene:lucene-analyzers-common:8.11.1"
    compileOnly "org.apache.poi:poi:5.1.0"
    implementation "org.apache.poi:poi-ooxml:5.1.0"

    compileOnly "org.apache.jena:jena-core:4.3.2"
    //Exclude jackson modules as they are already included by las2peer and newer versions may break things like swagger
    implementation ("org.apache.jena:jena-arq:4.3.2") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }

    compileOnly "org.ejml:ejml-core:0.41"
    implementation "org.hsqldb:hsqldb:2.6.1"
    compileOnly "org.apache.xmlgraphics:batik-svggen:1.14"
    compileOnly("org.apache.xmlgraphics:batik-bridge:1.14") {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    implementation "org.mockito:mockito-all:1.9.5"
    implementation "fr.irit.smac.thirdparty.edu.gmu.cs:mason:19"
    implementation "org.ojalgo:ojalgo:50.0.0"
    compileOnly "net.sbbi:sbbi-upnplib:1.0.4"
    implementation "org.graphstream:gs-core:2.0"

    //gs-algo version that includes HopcroftTarjanBiconnectedComponents
    implementation "org.graphstream:gs-algo:2.0.ACIS"
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

jar {
    manifest {
        attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }}  {
        // Exclude signatures to be able to natively bundle signed jars
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }

    duplicatesStrategy = 'include' // this is needed due to duplicate error in gradle 7.0 which seems to be a bug
}

application {
    // Define the main class for the application.
    mainClass = 'REST.OCD.Services.App'
}

// put all .jar files into export/jars folder
tasks.withType(Jar) {
    getDestinationDirectory().set(file("$projectDir/export/jars"))
}

javadoc {
    setDestinationDir(file("$projectDir/export/doc"))
}

build.dependsOn "javadoc"

compileJava {
    dependsOn "copyMain"
}

compileTestJava {
    dependsOn "copyTest"
}

// Copies .xml files into build directory
task copyMain(type: Copy) {
    from "src/main/java"
    include "**/*.xml"
    into "$buildDir/classes/java/main"
}

// Copies .xml files into build directory
task copyTest(type: Copy) {
    from "src/test/java"
    include "**/*.xml"
    into "$buildDir/classes/java/test"
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into "$rootDir/service"
}

task copyToLib(type: Copy) {
    from configurations.compileClasspath
    into "$rootDir/lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib

task startscripts {
    new File("$rootDir/bin", "start_network.sh").text = """#!/bin/bash
# this script is autogenerated by 'gradle startscripts'
# it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh
java -cp "lib/*:service/*" --add-opens java.base/java.lang=ALL-UNNAMED i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
"""
    new File("$rootDir/bin", "start_network.bat").text = """:: this script is autogenerated by 'gradle startscripts'
:: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it
%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;%BASE%/service/*;"
java -cp %CLASSPATH% --add-opens java.base/java.lang=ALL-UNNAMED i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive
pause
"""
}

build.dependsOn "startscripts"

def startup = "$rootDir/etc/startup"
def userAgent1Path = "${startup}/agent-user-${project.property('las2peer_user1.name')}.xml"
def userAgent2Path = "${startup}/agent-user-${project.property('las2peer_user2.name')}.xml"
def userAgent3Path = "${startup}/agent-user-${project.property('las2peer_user3.name')}.xml"
def passphrasesPath = "${startup}/passphrases.txt"

task generateUserAgent1 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent1Path).exists()) }

    doLast {
        tasks.create("generateUserAgent1Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent1Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user1.password')}", "${project.property('las2peer_user1.name')}", "${project.property('las2peer_user1.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent1Path)
        }.exec()
    }
}

task generateUserAgent2 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent2Path).exists()) }

    doLast {
        tasks.create("generateUserAgent2Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent2Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user2.password')}", "${project.property('las2peer_user2.name')}", "${project.property('las2peer_user2.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent2Path)
        }.exec()
    }
}

task generateUserAgent3 {
    dependsOn "jar"

    onlyIf { !(new File(userAgent3Path).exists()) }

    doLast {
        tasks.create("generateUserAgent3Help", JavaExec) {
            println "Writing User Agent xml to ${userAgent3Path}"

            main = "i5.las2peer.tools.UserAgentGenerator"
            classpath = sourceSets.main.compileClasspath
            args "${project.property('las2peer_user3.password')}", "${project.property('las2peer_user3.name')}", "${project.property('las2peer_user3.email')}"
            mkdir "${startup}"
            standardOutput new FileOutputStream(userAgent3Path)
        }.exec()
    }
}

// generate example user agents
task generateAgents {
    description "Generate example user agents"
    dependsOn "generateUserAgent1"
    dependsOn "generateUserAgent2"
    dependsOn "generateUserAgent3"

    doLast {
        new File(passphrasesPath).text = """agent-user-${project.property('las2peer_user1.name')}.xml;${project.property('las2peer_user1.password')}
agent-user-${project.property('las2peer_user2.name')}.xml;${project.property('las2peer_user2.password')}
agent-user-${project.property('las2peer_user3.name')}.xml;${project.property('las2peer_user3.password')}
        """
    }
}

build.dependsOn "generateAgents"

clean.doLast {
    file("$ocd/db").deleteDir()
    file("$ocd/indexes").deleteDir()

    file("$rootDir/tmp").deleteDir()
    file("$rootDir/lib").deleteDir()
    file("$rootDir/servicebundle").deleteDir()
    file("$rootDir/service").deleteDir()
    file("$rootDir/etc/startup").deleteDir()
    file("$projectDir/export").deleteDir()
}

task cleanAll {
    group 'build'
    dependsOn "clean"

    doLast {
        file("$rootDir/log").deleteDir()
        file("$rootDir/node-storage").deleteDir()
    }
}

test {
    workingDir = file("$rootDir")
}


// Only required when using Eclipse:
// configuration for eclipse (this allows to import the project as a gradle project in eclipse without any problems)
eclipse {
    classpath {
        file {
            whenMerged {
                // change output directory for test, main, resources and default
                def main = entries.find { it.path == "src/main/java" }
                main.output = "output/main"

                def test = entries.find { it.path == "src/test/java" }
                test.output = "output/test"

                def defaultEntry = entries.find { it.kind == "output" && it.path == "bin/default" }
                defaultEntry.path = "output/default"
            }
        }
    }
}